// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package remote

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// KvClient is the client API for Kv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KvClient interface {
	// open a cursor on given position of given bucket
	// if streaming requested - streams all data: stops if client's buffer is full, resumes when client read enough from buffer
	// if streaming not requested - streams next data only when clients sends message to bi-directional channel
	// no full consistency guarantee - server implementation can close/open underlying db transaction at any time
	Seek(ctx context.Context, opts ...grpc.CallOption) (Kv_SeekClient, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error)
}

type kvClient struct {
	cc grpc.ClientConnInterface
}

func NewKvClient(cc grpc.ClientConnInterface) KvClient {
	return &kvClient{cc}
}

func (c *kvClient) Seek(ctx context.Context, opts ...grpc.CallOption) (Kv_SeekClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Kv_serviceDesc.Streams[0], "/ethdb.Kv/Seek", opts...)
	if err != nil {
		return nil, err
	}
	x := &kvSeekClient{stream}
	return x, nil
}

type Kv_SeekClient interface {
	Send(*SeekRequest) error
	Recv() (*Pair, error)
	grpc.ClientStream
}

type kvSeekClient struct {
	grpc.ClientStream
}

func (x *kvSeekClient) Send(m *SeekRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *kvSeekClient) Recv() (*Pair, error) {
	m := new(Pair)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *kvClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetReply, error) {
	out := new(GetReply)
	err := c.cc.Invoke(ctx, "/ethdb.Kv/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KvServer is the server API for Kv service.
// All implementations must embed UnimplementedKvServer
// for forward compatibility
type KvServer interface {
	// open a cursor on given position of given bucket
	// if streaming requested - streams all data: stops if client's buffer is full, resumes when client read enough from buffer
	// if streaming not requested - streams next data only when clients sends message to bi-directional channel
	// no full consistency guarantee - server implementation can close/open underlying db transaction at any time
	Seek(Kv_SeekServer) error
	Get(context.Context, *GetRequest) (*GetReply, error)
	mustEmbedUnimplementedKvServer()
}

// UnimplementedKvServer must be embedded to have forward compatible implementations.
type UnimplementedKvServer struct {
}

func (*UnimplementedKvServer) Seek(Kv_SeekServer) error {
	return status.Errorf(codes.Unimplemented, "method Seek not implemented")
}
func (*UnimplementedKvServer) Get(context.Context, *GetRequest) (*GetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedKvServer) mustEmbedUnimplementedKvServer() {}

func RegisterKvServer(s *grpc.Server, srv KvServer) {
	s.RegisterService(&_Kv_serviceDesc, srv)
}

func _Kv_Seek_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KvServer).Seek(&kvSeekServer{stream})
}

type Kv_SeekServer interface {
	Send(*Pair) error
	Recv() (*SeekRequest, error)
	grpc.ServerStream
}

type kvSeekServer struct {
	grpc.ServerStream
}

func (x *kvSeekServer) Send(m *Pair) error {
	return x.ServerStream.SendMsg(m)
}

func (x *kvSeekServer) Recv() (*SeekRequest, error) {
	m := new(SeekRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Kv_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KvServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ethdb.Kv/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KvServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Kv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ethdb.Kv",
	HandlerType: (*KvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Kv_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Seek",
			Handler:       _Kv_Seek_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "remote/kv.proto",
}
